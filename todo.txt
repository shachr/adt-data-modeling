where i left off:
* added full support for json-schema types such as subschemes, schema dependency,conditional schema.
    - todo: add appropriate annotations such as if/else/then, etc.
    - dependentRequired
* java file artifact, that yet to be packaged.

Goal:
- Support for clean architecture in support of API stewardship and data+ai

Strategy:
Domain Strategy
    1. Schema Management
        1.1 Schema Parsing To ADT
            1.2.1. add support for json-schema subschema, such as schema composition, and conditional schema
            1.2.2. add anyOf
            1.2.3. if/else/then = oneOf, should be a special fieldDefinition?
            1.2.4. dependentSchemes = more schema composition, should be a special fieldDefinition?
            1.2.5. dependentRequired: https://json-schema.org/understanding-json-schema/reference/conditionals.html
            1.2.6 visitor that can resolve given a schema context.
            1.2.7 name anonymous types! -> todo: name ideally based on location unless not possible
            1.2.8 keep track of json-schema-idl: https://github.com/json-schema-org/vocab-idl/blob/main/charter.md

        1.2. ADT composition forward transitive compatibility check
            1.2.1. consistent universal compatibility checks with pipe and visitor support for extensions

        1.2. schema processing engine that uses a standard schema registry ( APICurio? )
            1.2.1. consider using reactive-streams:
                https://www.reactive-streams.org/
                https://github.com/reactive-streams/reactive-streams-jvm/tree/v1.0.4#specification

                OR camel routes ( comes with configuration ):
                https://camel.apache.org/manual/routes.html

        1.3. extract semantic context such as DDD domain concept, and relationships
            1.3.1 standardize json-schema
            1.3.2 standardize avro-schema
            1.3.3 standardize proto-schema
            1.3.4 standardize ddl-schema? or ddl.zip?

        1.4 support typed notifications and delta events
            1.4.1 design notification, in the context of an entity using ADT
                1.4.1.1 a schema modeling language to enable notification/delta design structure and conditions
                1.4.1.2 codegen to use jsonpatch ( https://jsonpatch.com/ ) to calculate differences between old and new
                1.4.1.3 codegen to determine whether conditions met per notification/delta event and publish
                1.4.1.4 introduce Delta<T>(T old, T new), preserving the entity structure with Delta<T> type attributes

API Strategy
    1 Compatibility, Versioning and Deprecation ( general guidelines )
    2 Serialization system - json specific rules, vs mature serialization system that can be used as is.
    3 Request-Response APIs:
        3.1 Domain APIs (subgraph) vs Frontend/B4F APIs (supergraph)
        3.2 When to use what: Rest, gRPC over HTTP/2 and graphQL ( https://spec.open-rpc.org/, https://avro.apache.org/docs/1.11.1/idl-language/, https://dubbo.apache.org/en/overview/tasks/triple/idl/ )
        3.3 API evolution and Service versioning for each technology ( Rest, gRpc and GraphQL )
        3.4 Compatibility, Versioning and Deprecation ( specific guidelines per technology )
    4 Event-Driven APIs:
        4.1 when to use queue vs streaming: SQS vs Kafka
        4.2 event standardization - CloudEvents headers, and tbd payload
        4.3 domain channel standardization - per entity and pattern? naming convention?
        4.4 content standardization - how to distinguish between different content types
        4.5 Compatibility, Versioning and Deprecation ( specific guidelines per technology )

Fabric Strategy ( self-service infrastructure and easy-to-use tools )
    1 Service strategy ( k8s based )
    2 Eventing strategy ( databricks based )
    3 Data Strategy ( databricks based )

    Service Strategy
        1. Identity and Authorization
        2. APIGateway
        3. ServiceMesh

    Data Strategy
        1 Write vs read persistence
            1.1 Infrastructure as Code (IaC)
                1.1.1 Write Data Polyglot
                1.1.2 Read Data Polyglot
                    Data Lake ( storage, data access, catalog )
                    ??
            1.2 Data Governance
        2 Data Processing Fabric -> Databricks
            2.1 data lineage ->  w/ open-lineage
                2.1.1 declared (role) vs inferred(code) data lineage
        3 Development Assets and Data Assets Registry ( Backstage )

    Eventing Strategy
        1 queueing (consider AMQP or CNCF) and for streaming consider a CNCF project (Kafka or Pulsar).
        2 a producing SDK spec:
            2.1 Sending:
            CloudEventBuilder cloudEventBuilder = CustomCloudEventBuilder.builder();
            cloudEventBuilder.createFactEvent(entity).validate().build();
            cloudEventBuilder.createNotificationEvents(oldEntity, newEntity).validate().build();
            cloudEventBuilder.createSystemEvent(bean).validate().build();
            cloudEventBuilder.createErrorEvent(entity).validate().build();
            cloudEventBuilder.createCommand(entity).validate().build();

            2.2 use native sdks to send the message (queue or stream):
                queue: rabbitMQCloudEventSender.send(CloudEvent messageQueue)
                stream: producer.send(new ProducerRecord<>(topic, "key", cloudEvent))

            2.3 Claim Check? FailOver?

            2.4 Data Validation:
                2.4.1 Json-schema for json payload validation
                2.4.2 Protobuf-validations? for proto validation
                2.4.3 Avro-validations? for proto validation
                2.4.4 Delta has built in schema evolution support

        3 a consuming SDK spec
            3.1 <T extends DomainEntity> Event<T> unmarshalEvent()
            3.2 <T extends DomainEntity> Message<T> unmarshalMessage()



Ontology:
------------------------------------------------
type Id - iri, globally unique URIs
type - class
named type - class
field type - objectProperty or datatypeProperty
type composition - rdfs:domain
relationship - objectProperty
value object - objectProperty
scalar type - datatypeProperty
alias - rdfs:label
description - rdfs:description
inheritance - rdfs:subClassOf

Graph:
------------------------------------------------
type Id - globally unique URIs
type - node
named type - node
field type - node
type composition - edge
relationship w/o properties - edge
relationship w/ properties - edge w/ properties
value object - node properties
scalar type - node properties
alias - node properties
description - node properties
inheritance - edge

Semantic Vector:
------------------------------------------------
dataAsset[id, ] -> vector[schemaContext.domain, schemaContext.subdomain, schemaContext.name, namedType.name, namedType.alias, namedType.attribute]



